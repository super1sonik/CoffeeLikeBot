using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Dapper;
using Microsoft.Data.Sqlite;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace CoffeeLikeBot
{
    class Program
    {
        private static ITelegramBotClient _bot = null!;
        private static readonly string DbPath = GetDatabasePath();
        private static string GetDatabasePath()
        {
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª (dll)
            var assemblyLocation = AppContext.BaseDirectory;
    
            // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 3 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö: bin/Debug/net6.0 -> –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
            var projectRoot = Path.GetFullPath(Path.Combine(assemblyLocation, "..", "..", ".."));
    
            var dataFolder = Path.Combine(projectRoot, "Data");
    
            // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É Data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!Directory.Exists(dataFolder))
            {
                Directory.CreateDirectory(dataFolder);
                Console.WriteLine($"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {dataFolder}");
            }
    
            var dbPath = Path.Combine(dataFolder, "coffeelike.db");
            Console.WriteLine($"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {dbPath}");
    
            return $"Data Source={dbPath}";
        }
        
        private static readonly List<long> AdminIds = new() { 856717073, 591241444 };

        private static readonly Dictionary<long, string> UserStates = new();
        private static readonly Dictionary<long, Dictionary<string, string>> UserRegistrationData = new();

        private static readonly ReplyKeyboardMarkup MainKeyboard = new(new[]
        {
            new KeyboardButton[] { "–ú–æ–∏ –±–æ–Ω—É—Å—ã", "–ó–∞–¥–∞–Ω–∏—è" },
            new KeyboardButton[] { "–ú–∞–≥–∞–∑–∏–Ω", "–ò—Å—Ç–æ—Ä–∏—è" },
            new KeyboardButton[] { "–Ø" }
        })
        {
            ResizeKeyboard = true
        };
        
        private static readonly ReplyKeyboardMarkup AdminKeyboard = new(new[]
        {
            new KeyboardButton[] { "–ó–∞–¥–∞–Ω–∏—è", "–ó–∞–ø—Ä–æ—Å—ã" },
            new KeyboardButton[] { "–ú–∞–≥–∞–∑–∏–Ω", "–ò—Å—Ç–æ—Ä–∏—è" },
            new KeyboardButton[] { "–Ø" }
        })
        {
            ResizeKeyboard = true
        };

        static async Task Main()
        {
            InitializeDatabase();
            MigrateDatabase();

            _bot = new TelegramBotClient("8468991260:AAEE5dkLzeKXr7kNBCo1O3LI0T_Sm6E2ixo");

            using var cts = new CancellationTokenSource();

            var me = await _bot.GetMe(cancellationToken: cts.Token);
            Console.WriteLine($"‚úÖ –ë–æ—Ç @{me.Username} –∑–∞–ø—É—â–µ–Ω...");

            await _bot.SetMyCommands(new[]
            {
                new BotCommand { Command = "start", Description = "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º" },
                new BotCommand { Command = "myid", Description = "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID" }
            }, cancellationToken: cts.Token);

            var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = Array.Empty<UpdateType>()
            };

            _bot.StartReceiving(
                HandleUpdateAsync,
                HandleErrorAsync,
                receiverOptions,
                cancellationToken: cts.Token
            );

            Console.ReadLine();
            cts.Cancel();
        }

        private static async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
        {
            try
            {
                if (update.Type == UpdateType.Message && update.Message?.Text is { } messageText)
                {
                    var chatId = update.Message.Chat.Id;
                    var userId = update.Message.From!.Id;
                    var username = update.Message.From.Username;

                    Console.WriteLine($"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {userId}: {messageText}");

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (UserStates.ContainsKey(userId))
                    {
                        var state = UserStates[userId];
                        Console.WriteLine($"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}");
                        
                        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
                        if (state == "awaiting_task" && AdminIds.Contains(userId))

                        {
                            Console.WriteLine($"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞: {messageText}");
                            
                            var parts = messageText.Split('|');
                            Console.WriteLine($"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: {parts.Length}");
                            
                            if (parts.Length == 3)
                            {
                                var title = parts[0].Trim();
                                if (int.TryParse(parts[1].Trim(), out int reward))
                                {
                                    var month = parts[2].Trim();
                                    
                                    Console.WriteLine($"üîç –ü—ã—Ç–∞—é—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {title}, {reward}, {month}");
                                    AddTask(title, reward, month);
                                    
                                    await _bot.SendMessage(chatId,
                                        $"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n" +
                                        $"üìù {title}\n" +
                                        $"üí∞ {reward} –±–∞–ª–ª–æ–≤\n" +
                                        $"üìÖ {month}",
                                        cancellationToken: cancellationToken);
                                    
                                    UserStates.Remove(userId);
                                    return;
                                }
                                else
                                {
                                    Console.WriteLine($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –±–∞–ª–ª—ã: {parts[1]}");
                                }
                            }
                            else
                            {
                                Console.WriteLine($"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π. –û–∂–∏–¥–∞–ª–æ—Å—å 3, –ø–æ–ª—É—á–µ–Ω–æ {parts.Length}");
                            }
                            
                            await _bot.SendMessage(chatId,
                                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n" +
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –ë–∞–ª–ª—ã | –ú–µ—Å—è—Ü\n\n" +
                                "–ü—Ä–∏–º–µ—Ä:\n–°–¥–µ–ª–∞—Ç—å 50 –∫–∞–ø—É—á–∏–Ω–æ | 100 | October",
                                cancellationToken: cancellationToken);
                            return;
                        }
                        
                        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –æ–∂–∏–¥–∞–µ–º –∏–º—è
                        if (state == "awaiting_firstname")
                        {
                            Console.WriteLine($"üîç –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {messageText}");
                            
                            if (!UserRegistrationData.ContainsKey(userId))
                                UserRegistrationData[userId] = new Dictionary<string, string>();
                            
                            UserRegistrationData[userId]["firstname"] = messageText.Trim();
                            UserStates[userId] = "awaiting_lastname";
                            
                            await _bot.SendMessage(chatId,
                                "üë§ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
                                cancellationToken: cancellationToken);
                            return;
                        }
                        
                        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –æ–∂–∏–¥–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
                        if (state == "awaiting_lastname")
                        {
                            Console.WriteLine($"üîç –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è: {messageText}");
                            
                            UserRegistrationData[userId]["lastname"] = messageText.Trim();
                            
                            var firstName = UserRegistrationData[userId]["firstname"];
                            var lastName = messageText.Trim();
                            var fullName = $"{firstName} {lastName}";
                            
                            RegisterUserWithFullName(userId, username, fullName);
                            
                            Console.WriteLine($"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {fullName}");
                            
                            UserStates.Remove(userId);
                            UserRegistrationData.Remove(userId);
                            
                            var keyboard = AdminIds.Contains(userId) ? AdminKeyboard : MainKeyboard;
                            await _bot.SendMessage(chatId,
                                $"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" +
                                $"üë§ {fullName}\n" +
                                $"üÜî ID: {userId}\n\n" +
                                $"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ Coffee Like! ‚òï \n",
                                replyMarkup: keyboard,
                                cancellationToken: cancellationToken);
                            return;
                        }
                        
                        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 1: –Ω–∞–∑–≤–∞–Ω–∏–µ
                        if (state == "awaiting_product_name")
                        {
                            if (!UserRegistrationData.ContainsKey(userId))
                                UserRegistrationData[userId] = new Dictionary<string, string>();
                            
                            UserRegistrationData[userId]["product_name"] = messageText.Trim();
                            UserStates[userId] = "awaiting_product_description";
                            
                            await _bot.SendMessage(chatId,
                                "üìù –®–∞–≥ 2Ô∏è‚É£: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n" +
                                "–ü—Ä–∏–º–µ—Ä: –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º",
                                cancellationToken: cancellationToken);
                            return;
                        }

                        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 2: –æ–ø–∏—Å–∞–Ω–∏–µ
                        if (state == "awaiting_product_description")
                        {
                            UserRegistrationData[userId]["product_description"] = messageText.Trim();
                            UserStates[userId] = "awaiting_product_price";
                            
                            await _bot.SendMessage(chatId,
                                "üí∞ –®–∞–≥ 3Ô∏è‚É£: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –±–æ–Ω—É—Å–∞—Ö\n\n" +
                                "–ü—Ä–∏–º–µ—Ä: 5000",
                                cancellationToken: cancellationToken);
                            return;
                        }

                        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 3: —Ü–µ–Ω–∞
                        if (state == "awaiting_product_price")
                        {
                            if (int.TryParse(messageText.Trim(), out int price) && price > 0)
                            {
                                UserRegistrationData[userId]["product_price"] = price.ToString();
                                UserStates[userId] = "awaiting_product_category";
                                
                                var categoryButtons = new[]
                                {
                                    new KeyboardButton[] { "üì± –¢–µ—Ö–Ω–∏–∫–∞" },
                                    new KeyboardButton[] { "üëï –ú–µ—Ä—á" },
                                    new KeyboardButton[] { "üéü –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã" }
                                };
                                
                                await _bot.SendMessage(chatId,
                                    "üìÇ –®–∞–≥ 4Ô∏è‚É£: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
                                    replyMarkup: new ReplyKeyboardMarkup(categoryButtons) { ResizeKeyboard = true },
                                    cancellationToken: cancellationToken);
                            }
                            else
                            {
                                await _bot.SendMessage(chatId,
                                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0\n\n" +
                                    "–ü—Ä–∏–º–µ—Ä: 5000",
                                    cancellationToken: cancellationToken);
                            }
                            return;
                        }

                        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 4: –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                        if (state == "awaiting_product_category")
                        {
                            string category = messageText switch
                            {
                                "üì± –¢–µ—Ö–Ω–∏–∫–∞" => "tech",
                                "üëï –ú–µ—Ä—á" => "merch",
                                "üéü –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã" => "cert",
                                _ => ""
                            };
                            
                            if (!string.IsNullOrEmpty(category))
                            {
                                UserRegistrationData[userId]["product_category"] = category;
                                UserStates[userId] = "awaiting_product_image";
                                
                                await _bot.SendMessage(chatId,
                                    "üñº –®–∞–≥ 5Ô∏è‚É£: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n" +
                                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n" +
                                    "–ü—Ä–∏–º–µ—Ä: https://example.com/image.jpg",
                                    replyMarkup: new ReplyKeyboardRemove(),
                                    cancellationToken: cancellationToken);
                            }
                            else
                            {
                                await _bot.SendMessage(chatId,
                                    "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫!",
                                    cancellationToken: cancellationToken);
                            }
                            return;
                        }

                        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 5: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        if (state == "awaiting_product_image")
                        {
                            string imageUrl = messageText.Trim().ToLower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" ? "" : messageText.Trim();
                            
                            var name = UserRegistrationData[userId]["product_name"];
                            var description = UserRegistrationData[userId]["product_description"];
                            var price = int.Parse(UserRegistrationData[userId]["product_price"]);
                            var category = UserRegistrationData[userId]["product_category"];
                            
                            AddProduct(name, description, price, category, imageUrl);
                            
                            var categoryName = category switch
                            {
                                "tech" => "üì± –¢–µ—Ö–Ω–∏–∫–∞",
                                "merch" => "üëï –ú–µ—Ä—á",
                                "cert" => "üéü –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã",
                                _ => "–¢–æ–≤–∞—Ä—ã"
                            };
                            
                            UserStates.Remove(userId);
                            UserRegistrationData.Remove(userId);
                            
                            var keyboard = AdminIds.Contains(userId) ? AdminKeyboard : MainKeyboard;
                            await _bot.SendMessage(chatId,
                                "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n" +
                                $"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n" +
                                $"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n" +
                                $"üí∞ –¶–µ–Ω–∞: {price} –±–æ–Ω—É—Å–æ–≤\n" +
                                $"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {categoryName}\n" +
                                $"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {(string.IsNullOrEmpty(imageUrl) ? "–ù–µ—Ç" : "–ï—Å—Ç—å")}",
                                replyMarkup: keyboard,
                                cancellationToken: cancellationToken);
                            return;
                        }
                    }

                    // –ö–æ–º–∞–Ω–¥–∞ /cleanup (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
                    if (messageText == "/cleanup" && AdminIds.Contains(userId))
                    {
                        using (var connection = new SqliteConnection(DbPath))
                        {
                            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                            int orders = connection.Execute("DELETE FROM Orders");
                            int completed = connection.Execute("DELETE FROM CompletedTasks");
                            int products = connection.Execute("DELETE FROM Products");
                            int tasks = connection.Execute("DELETE FROM Tasks");
        
                            Console.WriteLine($"üßπ –û—á–∏—Å—Ç–∫–∞: Orders={orders}, Completed={completed}, Products={products}, Tasks={tasks}");
        
                            await _bot.SendMessage(chatId,
                                $"üßπ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞!\n\n" +
                                $"‚ùå –ó–∞–∫–∞–∑—ã: {orders}\n" +
                                $"‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completed}\n" +
                                $"‚ùå –¢–æ–≤–∞—Ä—ã: {products}\n" +
                                $"‚ùå –ó–∞–¥–∞–Ω–∏—è: {tasks}",
                                cancellationToken: cancellationToken);
                        }
                        return;
                    }
                    
                    // –ö–æ–º–∞–Ω–¥–∞ /myid
                    if (messageText == "/myid")
                    {
                        await _bot.SendMessage(chatId,
                            $"üÜî –í–∞—à Telegram ID: {userId}\n" +
                            $"üë§ Username: @{username ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"}\n" +
                            $"üîë –ê–¥–º–∏–Ω ID: {AdminIds}\n" +
                            $"üë®‚Äçüíº –í—ã –∞–¥–º–∏–Ω: {(AdminIds.Contains(userId) ? "–î–∞ ‚úÖ" : "–ù–µ—Ç ‚ùå")}",
                            cancellationToken: cancellationToken);
                        return;
                    }

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
                    if (messageText.StartsWith("/start"))
                    {
                        Console.WriteLine($"üîç /start –æ—Ç userId: {userId}");
                        
                        if (!IsUserRegistered(userId))
                        {
                            Console.WriteLine($"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
                            UserStates[userId] = "awaiting_firstname";
                            
                            await _bot.SendMessage(chatId,
                                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Coffee Like Bot!\n\n" +
                                $"–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã. \n\n" +
                                "–ë–∞–ª–ª—ã –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤ –ú–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. \n\n" +
                                "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!\n\n" +
                                "üìù –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                                replyMarkup: new ReplyKeyboardRemove(),
                                cancellationToken: cancellationToken);
                            return;
                        }
                        
                        Console.WriteLine($"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
                        var keyboard = AdminIds.Contains(userId) ? AdminKeyboard : MainKeyboard;
                        var userInfo = GetUserInfo(userId);
                        await _bot.SendMessage(chatId, 
                            $"‚òï –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {userInfo.FullName}!\n\n" +
                            $"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {userInfo.Points} –±–æ–Ω—É—Å–æ–≤", 
                            replyMarkup: keyboard, 
                            cancellationToken: cancellationToken);
                        return;
                    }

                    // –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
                    if (messageText == "/cancel" && UserStates.ContainsKey(userId))
                    {
                        UserStates.Remove(userId);
                        await _bot.SendMessage(chatId, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", cancellationToken: cancellationToken);
                        return;
                    }

                    switch (messageText)
                    { 
                        case "–ú–æ–∏ –±–æ–Ω—É—Å—ã":
                            var keyboard = AdminIds.Contains(userId) ? AdminKeyboard : MainKeyboard;
                            int points = GetPoints(userId);
                            int completedTasksCount = GetCompletedTasksCount(userId);
                            await _bot.SendMessage(chatId, 
                                $"üí∞ –£ –≤–∞—Å {points} –±–æ–Ω—É—Å–æ–≤ ‚òï\n\n" +
                                $"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completedTasksCount}", 
                                replyMarkup: keyboard,
                                cancellationToken: cancellationToken);
                            break;

                        case "–Ø":
                            await ShowProfileInfo(chatId, userId, cancellationToken);
                            break;

                        case "–ó–∞–¥–∞–Ω–∏—è":
                            if (AdminIds.Contains(userId))
                            {
                                await ShowAdminTasksMenu(chatId, cancellationToken);
                            }
                            else
                            {
                                await ShowTasksList(chatId, cancellationToken);
                            }
                            break;

                        case "–ó–∞–ø—Ä–æ—Å—ã" when AdminIds.Contains(userId):
                            await ShowRequestsMenu(chatId, cancellationToken);
                            break;

                        case "–ú–∞–≥–∞–∑–∏–Ω":
                            // –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º
                            if (AdminIds.Contains(userId))
                            {
                                await ShowAdminShopMenu(chatId, cancellationToken);
                            }
                            else
                            {
                                await ShowShopCategories(chatId, cancellationToken);
                            }
                            break;

                        case "–ò—Å—Ç–æ—Ä–∏—è":
                            await ShowHistory(chatId, userId, cancellationToken);
                            break;
                    }
                }
                else if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery is { } callbackQuery)
                {
                    var chatId = callbackQuery.Message!.Chat.Id;
                    var userId = callbackQuery.From.Id;

                    Console.WriteLine($"üîò Callback: {callbackQuery.Data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}");

                    // === –ó–ê–ü–†–û–°–´ –ú–ï–ù–Æ ===
                    if (callbackQuery.Data == "requests_menu_tasks")
                    {
                        await ShowRequestsList(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data == "requests_menu_orders")
                    {
                        await ShowOrdersList(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    // === –ó–ê–î–ê–ù–ò–Ø ===
                    if (callbackQuery.Data == "tasks_list")
                    {
                        await ShowTasksList(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    // === –ê–î–ú–ò–ù - –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø–ú–ò ===
                    if (callbackQuery.Data == "admin_view_tasks")
                    {
                        Console.WriteLine("üîç –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è'");
                        await ShowAdminTasksList(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data == "admin_add_task")
                    {
                        Console.WriteLine("üîç –ê–¥–º–∏–Ω –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è");
                        UserStates[userId] = "awaiting_task";
                        await _bot.SendMessage(chatId,
                            "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n" +
                            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
                            "–ù–∞–∑–≤–∞–Ω–∏–µ | –ë–∞–ª–ª—ã | –ú–µ—Å—è—Ü\n\n" +
                            "–ü—Ä–∏–º–µ—Ä:\n" +
                            "–°–¥–µ–ª–∞—Ç—å 50 –∫–∞–ø—É—á–∏–Ω–æ | 100 | October\n\n" +
                            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
                            cancellationToken: cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data == "admin_delete_task")
                    {
                        await ShowTasksForDelete(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data.StartsWith("delete_task:"))
                    {
                        var taskId = int.Parse(callbackQuery.Data.Split(':')[1]);
                        DeleteTask(taskId);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, 
                            "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", 
                            cancellationToken: cancellationToken);
                        await ShowTasksForDelete(chatId, cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data == "admin_tasks_back")
                    {
                        await ShowAdminTasksMenu(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data!.StartsWith("task:"))
                    {
                        var taskId = int.Parse(callbackQuery.Data.Split(':')[1]);
                        await ShowTaskDetails(chatId, userId, taskId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data.StartsWith("complete:"))
                    {
                        var taskId = int.Parse(callbackQuery.Data.Split(':')[1]);

                        if (HasPendingRequest(userId, taskId))
                        {
                            await _bot.AnswerCallbackQuery(callbackQuery.Id, 
                                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!", 
                                showAlert: true,
                                cancellationToken: cancellationToken);
                            return;
                        }

                        if (IsTaskCompleted(userId, taskId))
                        {
                            await _bot.AnswerCallbackQuery(callbackQuery.Id, 
                                "‚úÖ –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!", 
                                showAlert: true,
                                cancellationToken: cancellationToken);
                            return;
                        }

                        SaveTaskRequest(userId, taskId);

                        await _bot.AnswerCallbackQuery(callbackQuery.Id, 
                            "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!", 
                            cancellationToken: cancellationToken);

                        var username = callbackQuery.From.Username;
                        var userDisplay = username != null ? $"@{username}" : $"ID: {userId}";
                        var task = GetTaskById(taskId);
                        
                        foreach (var adminId in AdminIds)
                        {
                            await _bot.SendMessage(
                                adminId,
                                $"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ!\n\n" +
                                $"üë§ –û—Ç: {userDisplay}\n" +
                                $"‚úÖ –ó–∞–¥–∞–Ω–∏–µ: {task.Title}\n" +
                                $"üí∞ –ë–∞–ª–ª–æ–≤: {task.Reward}",
                                cancellationToken: cancellationToken);
                        }

                        await _bot.EditMessageText(
                            chatId,
                            callbackQuery.Message.MessageId,
                            $"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n" +
                            $"üìù {task.Title}\n" +
                            $"üí∞ –ë–∞–ª–ª–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {task.Reward}\n\n" +
                            $"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                            replyMarkup: new InlineKeyboardMarkup(
                                InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º", "tasks_list")),
                            cancellationToken: cancellationToken);
                        return;
                    }

                    // === –ê–î–ú–ò–ù - –ó–ê–ü–†–û–°–´ –ù–ê –ó–ê–î–ê–ù–ò–Ø ===
                    if (callbackQuery.Data.StartsWith("request:"))
                    {
                        var requestId = int.Parse(callbackQuery.Data.Split(':')[1]);
                        await ShowRequestDetails(chatId, requestId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data == "requests_tasks_back")
                    {
                        await ShowRequestsList(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data.StartsWith("approve:"))
                    {
                        var parts = callbackQuery.Data.Split(':');
                        var baristaId = long.Parse(parts[1]);
                        var taskId = int.Parse(parts[2]);
                        var requestId = int.Parse(parts[3]);

                        using (var connection = new SqliteConnection(DbPath))
                        {
                            var taskInfo = connection.QueryFirst<(string TaskTitle, int TaskReward)>(
                                "SELECT TaskTitle, TaskReward FROM CompletedTasks WHERE Id = @RequestId",
                                new { RequestId = requestId });
        
                            AddPoints(baristaId, taskInfo.TaskReward);
                            UpdateRequestStatus(requestId, "approved");

                            await _bot.AnswerCallbackQuery(callbackQuery.Id, 
                                $"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {taskInfo.TaskReward} –±–∞–ª–ª–æ–≤!", 
                                cancellationToken: cancellationToken);
        
                            await _bot.SendMessage(baristaId, 
                                $"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n" +
                                $"‚úÖ {taskInfo.TaskTitle}\n" +
                                $"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {taskInfo.TaskReward} –±–æ–Ω—É—Å–æ–≤", 
                                cancellationToken: cancellationToken);
        
                            await _bot.EditMessageText(
                                chatId,
                                callbackQuery.Message.MessageId,
                                callbackQuery.Message.Text + "\n\n‚úÖ –û–î–û–ë–†–ï–ù–û",
                                cancellationToken: cancellationToken);
        
                            await Task.Delay(500, cancellationToken);
                            await ShowRequestsList(chatId, cancellationToken);
                        }
                        return;
                    }

                    if (callbackQuery.Data.StartsWith("reject:"))
                    {
                        var parts = callbackQuery.Data.Split(':');
                        var baristaId = long.Parse(parts[1]);
                        var taskId = int.Parse(parts[2]);
                        var requestId = int.Parse(parts[3]);

                        UpdateRequestStatus(requestId, "rejected");

                        await _bot.AnswerCallbackQuery(callbackQuery.Id, 
                            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", 
                            cancellationToken: cancellationToken);
                        
                        await _bot.SendMessage(baristaId, 
                            $"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.\n\n" +
                            $"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", 
                            cancellationToken: cancellationToken);
                        
                        await _bot.EditMessageText(
                            chatId,
                            callbackQuery.Message.MessageId,
                            callbackQuery.Message.Text + "\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û",
                            cancellationToken: cancellationToken);
                        
                        await Task.Delay(500, cancellationToken);
                        await ShowRequestsList(chatId, cancellationToken);
                        return;
                    }

                    // === –ê–î–ú–ò–ù - –ó–ê–ü–†–û–°–´ –ù–ê –ó–ê–ö–ê–ó–´ ===
                    if (callbackQuery.Data.StartsWith("order:"))
                    {
                        var orderId = int.Parse(callbackQuery.Data.Split(':')[1]);
                        await ShowOrderDetails(chatId, orderId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data == "requests_orders_back")
                    {
                        await ShowOrdersList(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data.StartsWith("order_work:"))
                    {
                        var orderId = int.Parse(callbackQuery.Data.Split(':')[1]);
                        var order = GetOrderById(orderId);
                        
                        if (order == null)
                        {
                            await _bot.AnswerCallbackQuery(callbackQuery.Id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", cancellationToken: cancellationToken);
                            return;
                        }

                        UpdateOrderStatus(orderId, "in_progress");
                        
                        var product = GetProductById(order.Value.ProductId);
                        
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, 
                            $"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!", 
                            cancellationToken: cancellationToken);
                        
                        await _bot.SendMessage(order.Value.UserId, 
                            $"üöÄ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!\n\n" +
                            $"üì¶ {product.Name}\n" +
                            $"‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–∏—Ç –∑–∞–∫–∞–∑...", 
                            cancellationToken: cancellationToken);
                        
                        await _bot.EditMessageText(
                            chatId,
                            callbackQuery.Message.MessageId,
                            callbackQuery.Message.Text + "\n\nüöÄ –í –†–ê–ë–û–¢–ï",
                            cancellationToken: cancellationToken);
                        
                        await Task.Delay(500, cancellationToken);
                        await ShowOrdersList(chatId, cancellationToken);
                        return;
                    }

                    // === –ê–î–ú–ò–ù - –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–û–ú ===
                    if (callbackQuery.Data == "admin_shop_menu")
                    {
                        await ShowAdminShopMenu(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data == "admin_view_products")
                    {
                        await ShowAllProductsList(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data == "admin_add_product")
                    {
                        Console.WriteLine("üîç –ê–¥–º–∏–Ω –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞");
                        UserStates[userId] = "awaiting_product_name";
                        await _bot.SendMessage(chatId,
                            "üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n\n" +
                            "–®–∞–≥ 1Ô∏è‚É£: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n" +
                            "–ü—Ä–∏–º–µ—Ä: –ù–∞—É—à–Ω–∏–∫–∏ AirPods",
                            cancellationToken: cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data == "admin_delete_product")
                    {
                        await ShowProductsForDelete(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data.StartsWith("delete_product:"))
                    {
                        var productId = int.Parse(callbackQuery.Data.Split(':')[1]);
                        var product = GetProductById(productId);
                        DeleteProduct(productId);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, 
                            $"‚úÖ –¢–æ–≤–∞—Ä '{product.Name}' —É–¥–∞–ª–µ–Ω!", 
                            cancellationToken: cancellationToken);
                        await ShowProductsForDelete(chatId, cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data == "admin_shop_back")
                    {
                        await ShowAdminShopMenu(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }
                    
                    // === –ú–ê–ì–ê–ó–ò–ù ===
                    if (callbackQuery.Data == "shop_main")
                    {
                        await ShowShopCategories(chatId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data.StartsWith("shop:"))
                    {
                        var category = callbackQuery.Data.Split(':')[1]; await ShowProducts(chatId, category, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data.StartsWith("product:"))
                    {
                        var productId = int.Parse(callbackQuery.Data.Split(':')[1]);
                        await ShowProductDetails(chatId, userId, productId, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }

                    if (callbackQuery.Data.StartsWith("buy:"))
                    {
                        var productId = int.Parse(callbackQuery.Data.Split(':')[1]);
                        var product = GetProductById(productId);
                        var userPoints = GetPoints(userId);

                        if (userPoints < product.Price)
                        {
                            await _bot.AnswerCallbackQuery(callbackQuery.Id, 
                                $"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤! –ù—É–∂–Ω–æ {product.Price}, —É –≤–∞—Å {userPoints}", 
                                showAlert: true,
                                cancellationToken: cancellationToken);
                            return;
                        }

                        CreateOrder(userId, productId, product.Price);
                        AddPoints(userId, -product.Price);

                        await _bot.AnswerCallbackQuery(callbackQuery.Id, 
                            "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!", 
                            cancellationToken: cancellationToken);

                        var username = callbackQuery.From.Username;
                        var userDisplay = username != null ? $"@{username}" : $"ID: {userId}";

                        foreach (var adminId in AdminIds)
                        {
                            await _bot.SendMessage(
                                adminId,
                                $"üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞!\n\n" +
                                $"üë§ –û—Ç: {userDisplay}\n" +
                                $"üì¶ –¢–æ–≤–∞—Ä: {product.Name}\n" +
                                $"üí∞ –¶–µ–Ω–∞: {product.Price} –±–æ–Ω—É—Å–æ–≤",
                                cancellationToken: cancellationToken);
                        }


                        await _bot.EditMessageText(
                            chatId,
                            callbackQuery.Message.MessageId,
                            $"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n" +
                            $"üì¶ {product.Name}\n" +
                            $"üí∞ –°–ø–∏—Å–∞–Ω–æ: {product.Price} –±–æ–Ω—É—Å–æ–≤\n" +
                            $"üí≥ –û—Å—Ç–∞–ª–æ—Å—å: {userPoints - product.Price} –±–æ–Ω—É—Å–æ–≤\n\n" +
                            $"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑.",
                            replyMarkup: new InlineKeyboardMarkup(
                                InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", "shop_main")),
                            cancellationToken: cancellationToken);
                        return;
                    }
                    
                    if (callbackQuery.Data.StartsWith("back_category:"))
                    {
                        var category = callbackQuery.Data.Split(':')[1];
                        await ShowProducts(chatId, category, cancellationToken);
                        await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}\n{ex.StackTrace}");
            }
        }
        
        private static void AddProduct(string name, string description, int price, string category, string imageUrl)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            connection.Execute(
                "INSERT INTO Products (Name, Description, Price, Category, ImageUrl) VALUES (@Name, @Description, @Price, @Category, @ImageUrl)",
                new { Name = name, Description = description, Price = price, Category = category, ImageUrl = imageUrl });
        }
        private static async Task ShowAllProductsList(long chatId, CancellationToken cancellationToken)
        {
            var products = GetAllProducts();

            if (!products.Any())
            {
                await _bot.SendMessage(chatId,
                    "üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç",
                    replyMarkup: new InlineKeyboardMarkup(
                        InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_shop_back")),
                    cancellationToken: cancellationToken);
                return;
            }

            string message = "üìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ:\n\n";
            int count = 1;
            foreach (var product in products)
            {
                message += $"{count}. üì¶ {product.Name}\n   üí∞ {product.Price} –±–æ–Ω—É—Å–æ–≤\n\n";
                count++;
            }

            await _bot.SendMessage(chatId,
                message,
                replyMarkup: new InlineKeyboardMarkup(
                    InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_shop_back")),
                cancellationToken: cancellationToken);
        }
        
        // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò ===
        private static IEnumerable<(int Id, string Name, int Price, string Category)> GetAllProducts()
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            return connection.Query<(int, string, int, string)>(
                "SELECT Id, Name, Price, Category FROM Products ORDER BY Category, Name");
        }

        private static async Task ShowProductsForDelete(long chatId, CancellationToken cancellationToken)
        {
            var products = GetAllProducts().ToList();
            
            Console.WriteLine($"üîç –¢–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {products.Count}");
            foreach (var p in products)
            {
                Console.WriteLine($"   ID={p.Id}, Name={p.Name}");
            }
            
            if (!products.Any())
            {
                await _bot.SendMessage(chatId,
                    "üì¶ –¢–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç",
                    replyMarkup: new InlineKeyboardMarkup(
                        InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_shop_back")),
                    cancellationToken: cancellationToken);
                return;
            }

            var buttons = new List<InlineKeyboardButton[]>();
            foreach (var product in products)
            {
                var categoryEmoji = product.Category switch
                {
                    "tech" => "üì±",
                    "merch" => "üëï",
                    "cert" => "üéü",
                    _ => "üì¶"
                };
        
                buttons.Add(new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"üóë {categoryEmoji} {product.Name} ({product.Price} üí∞)",
                        $"delete_product:{product.Id}")
                });
            }
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_shop_back") });

            await _bot.SendMessage(chatId,
                "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        private static void DeleteProduct(int productId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            connection.Execute("DELETE FROM Products WHERE Id = @Id", new { Id = productId });
            Console.WriteLine($"‚úÖ –¢–æ–≤–∞—Ä ID {productId} —É–¥–∞–ª—ë–Ω");
        }
        
        // === –ü–†–û–§–ò–õ–¨ ===
        private static async Task ShowProfileInfo(long chatId, long userId, CancellationToken cancellationToken)
        {
            var userInfo = GetUserFullInfo(userId);
    
            string message;
    
            if (AdminIds.Contains(userId))
            {
                // –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞
                var tasksStats = GetAdminTasksStats();
                var ordersStats = GetAdminOrdersStats();
        
                message = $"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n\n" +
                          $"üìù –ò–º—è: {userInfo.FullName}\n" +
                          $"üÜî Telegram ID: {userId}\n";

                if (!string.IsNullOrEmpty(userInfo.Username))
                    message += $"üì± Username: @{userInfo.Username}\n";

                message += $"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" +
                           $"‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {tasksStats.Approved}\n" +
                           $"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {tasksStats.Rejected}\n" +
                           $"üì¶ –ü—Ä–∏–Ω—è—Ç–æ –∑–∞–∫–∞–∑–æ–≤: {ordersStats}";
            }
            else
            {
                // –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±–∞—Ä–∏—Å—Ç–∞
                var points = GetPoints(userId);
                var completedCount = GetCompletedTasksCount(userId);
                var ordersCount = GetUserOrdersCount(userId);

                message = $"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n" +
                          $"üìù –ò–º—è: {userInfo.FullName}\n" +
                          $"üÜî Telegram ID: {userId}\n";

                if (!string.IsNullOrEmpty(userInfo.Username))
                    message += $"üì± Username: @{userInfo.Username}\n";

                message += $"\nüí∞ –ë–æ–Ω—É—Å–æ–≤: {points}\n" +
                           $"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completedCount}\n" +
                           $"üõçÔ∏è –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {ordersCount}";
            }

            await _bot.SendMessage(chatId, message, cancellationToken: cancellationToken);
        }
        
        // === –ê–î–ú–ò–ù - –ú–ê–ì–ê–ó–ò–ù ===
        private static async Task ShowAdminShopMenu(long chatId, CancellationToken cancellationToken)
        {
            var buttons = new[]
            {
                new [] { InlineKeyboardButton.WithCallbackData("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", "admin_view_products") },
                new [] { InlineKeyboardButton.WithCallbackData("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "admin_add_product") },
                new [] { InlineKeyboardButton.WithCallbackData("üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", "admin_delete_product") }
            };

            await _bot.SendMessage(chatId,
                "üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }
        
        // === –ê–î–ú–ò–ù - –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø–ú–ò ===
        private static async Task ShowAdminTasksMenu(long chatId, CancellationToken cancellationToken)
        {
            var buttons = new[]
            {
                new [] { InlineKeyboardButton.WithCallbackData("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è", "admin_view_tasks") },
                new [] { InlineKeyboardButton.WithCallbackData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "admin_add_task") },
                new [] { InlineKeyboardButton.WithCallbackData("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "admin_delete_task") }
            };

            await _bot.SendMessage(chatId,
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        private static async Task ShowAdminTasksList(long chatId, CancellationToken cancellationToken)
        {
            var tasks = GetTasks();
            
            Console.WriteLine($"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –≤ –ë–î: {tasks.Count()}");

            if (!tasks.Any())
            {
                Console.WriteLine("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç!");
                await _bot.SendMessage(chatId,
                    "üìã –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç",
                    replyMarkup: new InlineKeyboardMarkup(
                        InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_tasks_back")),
                    cancellationToken: cancellationToken);
                return;
            }

            string message = "üìã –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n";
            int count = 1;
            foreach (var task in tasks)
            {
                Console.WriteLine($"üîç –ó–∞–¥–∞–Ω–∏–µ {count}: {task.Title}, {task.Reward} –±–∞–ª–ª–æ–≤");
                message += $"{count}. {task.Title}\n   üí∞ {task.Reward} –±–∞–ª–ª–æ–≤\n\n";
                count++;
            }

            await _bot.SendMessage(chatId,
                message,
                replyMarkup: new InlineKeyboardMarkup(
                    InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_tasks_back")),
                cancellationToken: cancellationToken);
        }

        private static async Task ShowTasksForDelete(long chatId, CancellationToken cancellationToken)
        {
            var tasks = GetTasks();

            if (!tasks.Any())
            {
                await _bot.SendMessage(chatId,
                    "üìã –ó–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç",
                    replyMarkup: new InlineKeyboardMarkup(
                        InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_tasks_back")),
                    cancellationToken: cancellationToken);
                return;
            }

            var buttons = new List<InlineKeyboardButton[]>();
            foreach (var task in tasks)
            {
                buttons.Add(new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"üóë {task.Title} ({task.Reward} üí∞)",
                        $"delete_task:{task.Id}")
                });
            }
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_tasks_back") });

            await _bot.SendMessage(chatId,
                "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        // === –ê–î–ú–ò–ù - –ó–ê–ü–†–û–°–´ ===
        private static async Task ShowRequestsMenu(long chatId, CancellationToken cancellationToken)
        {
            var buttons = new[]
            {
                new [] { InlineKeyboardButton.WithCallbackData("‚úÖ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è", "requests_menu_tasks") },
                new [] { InlineKeyboardButton.WithCallbackData("üõçÔ∏è –ó–∞–∫–∞–∑—ã —Ç–æ–≤–∞—Ä–æ–≤", "requests_menu_orders") }
            };

            await _bot.SendMessage(chatId,
                "üìã –ú–µ–Ω—é –∑–∞–ø—Ä–æ—Å–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–æ–≤:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        private static async Task ShowRequestsList(long chatId, CancellationToken cancellationToken)
        {
            var pending = GetPendingTasks();

            if (!pending.Any())
            {
                await _bot.SendMessage(chatId,
                    "üìã –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è ‚úÖ",
                    cancellationToken: cancellationToken);
                return;
            }

            var buttons = new List<InlineKeyboardButton[]>();
            foreach (var req in pending)
            {
                var userInfo = GetUserFullInfo(req.UserId);
                var userDisplay = $"{userInfo.FullName}";
                if (!string.IsNullOrEmpty(userInfo.Username))
                    userDisplay += $" @{userInfo.Username}";
                
                buttons.Add(new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"üìã {userDisplay} ‚Äî {req.TaskTitle}",
                        $"request:{req.RequestId}")
                });
            }

            await _bot.SendMessage(chatId,
                $"‚úÖ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è: {pending.Count}\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        private static async Task ShowRequestDetails(long chatId, int requestId, CancellationToken cancellationToken)
        {
            var request = GetRequestById(requestId);

            if (request == null)
            {
                await _bot.SendMessage(chatId, "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", cancellationToken: cancellationToken);
                return;
            }

            var userInfo = GetUserFullInfo(request.Value.UserId);
            var userDisplay = $"{userInfo.FullName}";
            if (!string.IsNullOrEmpty(userInfo.Username))
                userDisplay += $" (@{userInfo.Username})";
            userDisplay += $"\nüÜî ID: {request.Value.UserId}";

            var buttons = new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", 
                        $"approve:{request.Value.UserId}:{request.Value.TaskId}:{requestId}"),
                    InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                        $"reject:{request.Value.UserId}:{request.Value.TaskId}:{requestId}")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "requests_tasks_back")
                }
            };

            await _bot.SendMessage(chatId,
                $"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
                $"üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ #{requestId}\n\n" +
                $"üë§ –ë–∞—Ä–∏—Å—Ç–∞:\n{userDisplay}\n\n" +
                $"‚úÖ –ó–∞–¥–∞–Ω–∏–µ: {request.Value.TaskTitle}\n" +
                $"üí∞ –ë–∞–ª–ª–æ–≤: {request.Value.Reward}\n" +
                $"üïê –î–∞—Ç–∞: {request.Value.CreatedAt:dd.MM.yyyy HH:mm}\n\n" +
                $"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        // === –ó–ê–ö–ê–ó–´ –¢–û–í–ê–†–û–í ===
        private static async Task ShowOrdersList(long chatId, CancellationToken cancellationToken)
        {
            var orders = GetPendingOrders();

            if (!orders.Any())
            {
                await _bot.SendMessage(chatId,
                    "üìã –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä—ã ‚úÖ",
                    cancellationToken: cancellationToken);
                return;
            }

            var buttons = new List<InlineKeyboardButton[]>();
            foreach (var ord in orders)
            {
                var userInfo = GetUserFullInfo(ord.UserId);
                var userDisplay = $"{userInfo.FullName}";
                if (!string.IsNullOrEmpty(userInfo.Username))
                    userDisplay += $" @{userInfo.Username}";
                
                buttons.Add(new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"üõçÔ∏è {userDisplay} ‚Äî {ord.ProductName}",
                        $"order:{ord.OrderId}")
                });
            }

            await _bot.SendMessage(chatId,
                $"üõçÔ∏è –ó–∞–∫–∞–∑–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {orders.Count()}\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        private static async Task ShowOrderDetails(long chatId, int orderId, CancellationToken cancellationToken)
        {
            var order = GetOrderById(orderId);

            if (order == null)
            {
                await _bot.SendMessage(chatId, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", cancellationToken: cancellationToken);
                return;
            }

            var product = GetProductById(order.Value.ProductId);
            var userInfo = GetUserFullInfo(order.Value.UserId);
            var userDisplay = $"{userInfo.FullName}";
            if (!string.IsNullOrEmpty(userInfo.Username))
                userDisplay += $" (@{userInfo.Username})";
            userDisplay += $"\nüÜî ID: {order.Value.UserId}";

            var buttons = new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üöÄ –í —Ä–∞–±–æ—Ç—É", 
                        $"order_work:{orderId}")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "requests_orders_back")
                }
            };

            await _bot.SendMessage(chatId,
                $"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
                $"üõçÔ∏è –ó–∞–∫–∞–∑ #{orderId}\n\n" +
                $"üë§ –ë–∞—Ä–∏—Å—Ç–∞:\n{userDisplay}\n\n" +
                $"üì¶ –¢–æ–≤–∞—Ä: {product.Name}\n" +
                $"üí∞ –¶–µ–Ω–∞: {order.Value.Price} –±–æ–Ω—É—Å–æ–≤\n" +
                $"üïê –î–∞—Ç–∞: {order.Value.CreatedAt:dd.MM.yyyy HH:mm}\n\n" +
                $"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        // === –ó–ê–î–ê–ù–ò–Ø ===
        private static async Task ShowTasksList(long chatId, CancellationToken cancellationToken)
        {
            var tasks = GetTasks();
            
            if (!tasks.Any())
            {
                await _bot.SendMessage(chatId, 
                    "üìã –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", 
                    cancellationToken: cancellationToken);
                return;
            }

            var taskButtons = new List<InlineKeyboardButton[]>();
            
            foreach (var task in tasks)
            {
                taskButtons.Add(new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"üìù {task.Title}", 
                        $"task:{task.Id}")
                });
            }

            await _bot.SendMessage(chatId, 
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏",
                replyMarkup: new InlineKeyboardMarkup(taskButtons),
                cancellationToken: cancellationToken);
        }

        private static async Task ShowTaskDetails(long chatId, long userId, int taskId, CancellationToken cancellationToken)
        {
            var task = GetTaskById(taskId);
            var status = GetTaskStatus(userId, taskId);
            string statusText = "";
            List<InlineKeyboardButton[]> buttons = new();

            switch (status)
            {
                case "approved":
                    statusText = "\n\n‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!";
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º", "tasks_list") });
                    break;
                
                case "pending":
                    statusText = "\n\n‚è≥ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞";
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º", "tasks_list") });
                    break;
                
                case "rejected":
                    statusText = "\n\n‚ùå –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞";
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", $"complete:{taskId}"),
                        InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "tasks_list")
                    });
                    break;
                
                default:
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", $"complete:{taskId}"),
                        InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "tasks_list")
                    });
                    break;
            }

            await _bot.SendMessage(chatId,
                $"üìù –ó–∞–¥–∞–Ω–∏–µ\n\n" +
                $"{task.Title}\n\n" +
                $"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {task.Reward} –±–æ–Ω—É—Å–æ–≤{statusText}",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        // === –ú–ê–ì–ê–ó–ò–ù ===
        private static async Task ShowShopCategories(long chatId, CancellationToken cancellationToken)
        {
            var buttons = new[]
            {
                new [] { InlineKeyboardButton.WithCallbackData("üì± –¢–µ—Ö–Ω–∏–∫–∞", "shop:tech") },
                new [] { InlineKeyboardButton.WithCallbackData("üëï –ú–µ—Ä—á", "shop:merch") },
                new [] { InlineKeyboardButton.WithCallbackData("üéü –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", "shop:cert") }
            };

            await _bot.SendMessage(chatId, 
                "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω Coffee Like\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        private static async Task ShowProducts(long chatId, string category, CancellationToken cancellationToken)
        {
            var products = GetProductsByCategory(category);

            if (!products.Any())
            {
                await _bot.SendMessage(chatId,
                    "üì¶ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                    replyMarkup: new InlineKeyboardMarkup(
                        InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "shop_main")),
                    cancellationToken: cancellationToken);
                return;
            }

            var categoryName = category switch
            {
                "tech" => "üì± –¢–µ—Ö–Ω–∏–∫–∞",
                "merch" => "üëï –ú–µ—Ä—á",
                "cert" => "üéü –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã",
                _ => "–¢–æ–≤–∞—Ä—ã"
            };

            var buttons = new List<InlineKeyboardButton[]>();
            foreach (var product in products)
            {
                buttons.Add(new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"{product.Name} ‚Äî {product.Price} üí∞",
                        $"product:{product.Id}")
                });
            }
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "shop_main") });

            await _bot.SendMessage(chatId,
                $"{categoryName}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        private static async Task ShowProductDetails(long chatId, long userId, int productId, CancellationToken cancellationToken)
        {
            var product = GetProductByIdWithImage(productId);
            var userPoints = GetPoints(userId);

            var buttons = new List<InlineKeyboardButton[]>();

            if (userPoints >= product.Price)
            {
                buttons.Add(new[]
                {
                    InlineKeyboardButton.WithCallbackData($"‚úÖ –ö—É–ø–∏—Ç—å –∑–∞ {product.Price} üí∞", $"buy:{productId}")
                });
            }
            else
            {
                buttons.Add(new[]
                {
                    InlineKeyboardButton.WithCallbackData($"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {product.Price - userPoints} üí∞", "insufficient")
                });
            }

            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", $"back_category:{product.Category}") });

            var statusText = userPoints >= product.Price ? "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" : "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤";

            var messageText = $"üì¶ {product.Name}\n\n" +
                $"{product.Description}\n\n" +
                $"üí∞ –¶–µ–Ω–∞: {product.Price} –±–æ–Ω—É—Å–æ–≤\n" +
                $"üí≥ –£ –≤–∞—Å: {userPoints} –±–æ–Ω—É—Å–æ–≤\n\n" +
                $"{statusText}";

            if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                try
                {
                    Console.WriteLine($"üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ: {product.ImageUrl}");
                    await _bot.SendPhoto(chatId,
                        InputFile.FromUri(product.ImageUrl),
                        caption: messageText,
                        replyMarkup: new InlineKeyboardMarkup(buttons),
                        cancellationToken: cancellationToken);
                    Console.WriteLine("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                    return;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: {ex.Message}");
                }
            }

            await _bot.SendMessage(chatId,
                messageText,
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }
            // === –ò–°–¢–û–†–ò–Ø ===
            private static async Task ShowHistory(long chatId, long userId, CancellationToken cancellationToken)
            {
                string message;
                
                if (AdminIds.Contains(userId))
                {
                    // –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
                    var tasksHistory = GetAdminTasksHistory();
                    var ordersHistory = GetAdminOrdersHistory();

                    message = "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n";

                    if (tasksHistory.Any())
                    {
                        message += "üìã –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n";
                        foreach (var task in tasksHistory.Take(10))
                        {
                            var statusEmoji = task.Status == "approved" ? "‚úÖ" : "‚ùå";
                            var statusText = task.Status == "approved" ? "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ" : "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ";
                            message += $"{statusEmoji} {task.BaristaName} ‚Äî {task.TaskTitle}\n   {statusText} | {task.ReviewedAt:dd.MM.yyyy HH:mm}\n\n";
                        }
                        if (tasksHistory.Count() > 10)
                            message += $"... –∏ –µ—â–µ {tasksHistory.Count() - 10}\n";
                    }
                    else
                    {
                        message += "üìã –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\n";
                    }

                    message += "\n";

                    if (ordersHistory.Any())
                    {
                        message += "üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n";
                        foreach (var order in ordersHistory.Take(10))
                        {
                            message += $"üöÄ {order.BaristaName} ‚Äî {order.ProductName}\n   –í —Ä–∞–±–æ—Ç–µ | {order.OrderDate:dd.MM.yyyy HH:mm}\n\n";
                        }
                        if (ordersHistory.Count() > 10)
                            message += $"... –∏ –µ—â–µ {ordersHistory.Count() - 10}\n";
                    }
                    else
                    {
                        message += "üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n";
                    }
                }
                else
                {
                    // –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –±–∞—Ä–∏—Å—Ç–∞
                    var completedTasks = GetUserCompletedTasks(userId);
                    var orders = GetUserOrders(userId);

                    message = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è\n\n";

                    if (completedTasks.Any())
                    {
                        message += "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n";
                        foreach (var task in completedTasks.Take(5))
                        {
                            message += $"‚Ä¢ {task.Title} (+{task.Reward} üí∞) ‚Äî {task.CompletedAt:dd.MM.yyyy}\n";
                        }
                        if (completedTasks.Count() > 5)
                            message += $"... –∏ –µ—â–µ {completedTasks.Count() - 5}\n";
                    }
                    else
                    {
                        message += "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\n";
                    }

                    message += "\n";

                    if (orders.Any())
                    {
                        message += "üõçÔ∏è –ü–æ–∫—É–ø–∫–∏:\n";
                        foreach (var order in orders.Take(5))
                        {
                            message += $"‚Ä¢ {order.ProductName} (-{order.Price} üí∞) ‚Äî {order.OrderDate:dd.MM.yyyy}\n";
                        }
                        if (orders.Count() > 5)
                            message += $"... –∏ –µ—â–µ {orders.Count() - 5}\n";
                    }
                    else
                    {
                        message += "üõçÔ∏è –ü–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç\n";
                    }
                }

                await _bot.SendMessage(chatId, message, cancellationToken: cancellationToken);
            }
        
        private static Task HandleErrorAsync(ITelegramBotClient bot, Exception ex, CancellationToken cancellationToken)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
            return Task.CompletedTask;
        }
        
        // ====== –ë–ê–ó–ê –î–ê–ù–ù–´–• ======
        
        private static void InitializeDatabase()
        {
            Console.WriteLine("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    
            using IDbConnection connection = new SqliteConnection(DbPath);
    
            connection.Execute(@"
        CREATE TABLE IF NOT EXISTS Users (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            TelegramId INTEGER UNIQUE NOT NULL,
            Username TEXT,
            FullName TEXT NOT NULL,
            Points INTEGER DEFAULT 0,
            CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
        )");

            connection.Execute(@"
        CREATE TABLE IF NOT EXISTS Tasks (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            Title TEXT NOT NULL,
            Reward INTEGER NOT NULL,
            Month TEXT,
            CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
        )");

            connection.Execute(@"
        CREATE TABLE IF NOT EXISTS CompletedTasks (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            UserId INTEGER NOT NULL,
            TaskId INTEGER NOT NULL,
            TaskTitle TEXT NOT NULL,
            TaskReward INTEGER NOT NULL,
            Status TEXT DEFAULT 'pending',
            CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
        )");

            connection.Execute(@"
        CREATE TABLE IF NOT EXISTS Products (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            Name TEXT NOT NULL,
            Description TEXT,
            Price INTEGER NOT NULL,
            Category TEXT NOT NULL,
            ImageUrl TEXT,
            CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
        )");

            connection.Execute(@"
        CREATE TABLE IF NOT EXISTS Orders (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            UserId INTEGER NOT NULL,
            ProductId INTEGER NOT NULL,
            ProductName TEXT NOT NULL,
            Price INTEGER NOT NULL,
            Status TEXT DEFAULT 'pending',
            CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
        )");
    
            Console.WriteLine("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
        }

        private static void RegisterUserWithFullName(long telegramId, string? username, string fullName)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            connection.Execute(
                "INSERT OR REPLACE INTO Users (TelegramId, Username, FullName, Points) VALUES (@TelegramId, @Username, @FullName, COALESCE((SELECT Points FROM Users WHERE TelegramId = @TelegramId), 0))", 
                new { TelegramId = telegramId, Username = username ?? "", FullName = fullName });
        }
        
        private static bool IsUserRegistered(long telegramId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var fullName = connection.QueryFirstOrDefault<string>(
                "SELECT FullName FROM Users WHERE TelegramId = @TelegramId",
                new { TelegramId = telegramId });
            
            bool isRegistered = !string.IsNullOrEmpty(fullName) && fullName != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
            return isRegistered;
        }

        private static (string FullName, int Points) GetUserInfo(long telegramId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            return connection.QueryFirstOrDefault<(string, int)>(
                "SELECT FullName, Points FROM Users WHERE TelegramId = @TelegramId",
                new { TelegramId = telegramId });
        }

        private static int GetPoints(long telegramId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            connection.Execute(
                "INSERT OR IGNORE INTO Users (TelegramId, Username, FullName, Points) VALUES (@TelegramId, '', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', 0)", 
                new { TelegramId = telegramId });
            return connection.QuerySingle<int>(
                "SELECT Points FROM Users WHERE TelegramId = @TelegramId", 
                new { TelegramId = telegramId });
        }

        private static void AddPoints(long telegramId, int points)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            connection.Execute(
                "UPDATE Users SET Points = Points + @Points WHERE TelegramId = @TelegramId", 
                new { TelegramId = telegramId, Points = points });
        }

        // === –ó–ê–î–ê–ù–ò–Ø ===
        private static void AddTask(string title, int reward, string month)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            try
            {
                connection.Execute(
                    "INSERT INTO Tasks (Title, Reward, Month) VALUES (@Title, @Reward, @Month)",
                    new { Title = title, Reward = reward, Month = month });
                Console.WriteLine($"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {title}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
            }
        }

        private static void DeleteTask(int taskId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            connection.Execute("DELETE FROM Tasks WHERE Id = @Id", new { Id = taskId });
            Console.WriteLine($"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ID {taskId} —É–¥–∞–ª–µ–Ω–æ");
        }
        
        private static IEnumerable<(int Id, string Title, int Reward)> GetTasks()
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var tasks = connection.Query<(int, string, int)>("SELECT Id, Title, Reward FROM Tasks");
            return tasks;
        }

        private static (int Id, string Title, int Reward) GetTaskById(int taskId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            return connection.QuerySingle<(int, string, int)>(
                "SELECT Id, Title, Reward FROM Tasks WHERE Id = @TaskId", 
                new { TaskId = taskId });
        }

        private static bool HasPendingRequest(long telegramId, int taskId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var count = connection.QuerySingle<int>(
                "SELECT COUNT(*) FROM CompletedTasks WHERE UserId = @UserId AND TaskId = @TaskId AND Status = 'pending'",
                new { UserId = telegramId, TaskId = taskId });
            return count > 0;
        }

        private static bool IsTaskCompleted(long telegramId, int taskId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var count = connection.QuerySingle<int>(
                "SELECT COUNT(*) FROM CompletedTasks WHERE UserId = @UserId AND TaskId = @TaskId AND Status = 'approved'",
                new { UserId = telegramId, TaskId = taskId });
            return count > 0;
        }

        private static string GetTaskStatus(long telegramId, int taskId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            return connection.QueryFirstOrDefault<string>(
                "SELECT Status FROM CompletedTasks WHERE UserId = @UserId AND TaskId = @TaskId ORDER BY CreatedAt DESC LIMIT 1",
                new { UserId = telegramId, TaskId = taskId }) ?? "";
        }

        private static void SaveTaskRequest(long telegramId, int taskId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
    
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            var task = GetTaskById(taskId);
    
            connection.Execute(
                "INSERT INTO CompletedTasks (UserId, TaskId, TaskTitle, TaskReward, Status) VALUES (@UserId, @TaskId, @TaskTitle, @TaskReward, 'pending')",
                new { UserId = telegramId, TaskId = taskId, TaskTitle = task.Title, TaskReward = task.Reward });
        }

        private static void UpdateRequestStatus(int requestId, string status)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            connection.Execute(
                "UPDATE CompletedTasks SET Status = @Status WHERE Id = @Id",
                new { Id = requestId, Status = status });
        }

        private static List<(int RequestId, long UserId, int TaskId, string? Username, string TaskTitle, int Reward, DateTime CreatedAt)> GetPendingTasks()
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var sql = @"
                SELECT c.Id as RequestId, c.UserId, c.TaskId, u.Username as Username, 
                       c.TaskTitle, c.TaskReward as Reward, c.CreatedAt
                FROM CompletedTasks c
                JOIN Users u ON u.TelegramId = c.UserId
                WHERE c.Status = 'pending'
                ORDER BY c.CreatedAt ASC";
            return connection.Query<(int, long, int, string?, string, int, DateTime)>(sql).AsList();
        }

        private static (long UserId, int TaskId, string? Username, string TaskTitle, int Reward, DateTime CreatedAt)? GetRequestById(int requestId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var sql = @"
                SELECT c.UserId, c.TaskId, u.Username, c.TaskTitle, c.TaskReward as Reward, c.CreatedAt
                FROM CompletedTasks c
                JOIN Users u ON u.TelegramId = c.UserId
                WHERE c.Id = @RequestId AND c.Status = 'pending'";
            return connection.QueryFirstOrDefault<(long, int, string?, string, int, DateTime)>(sql, new { RequestId = requestId });
        }

        // === –ú–ê–ì–ê–ó–ò–ù ===
        private static IEnumerable<(int Id, string Name, int Price, string Category)> GetProductsByCategory(string category)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            return connection.Query<(int, string, int, string)>(
                "SELECT Id, Name, Price, Category FROM Products WHERE Category = @Category",
                new { Category = category });
        }

        private static (int Id, string Name, string Description, int Price, string Category) GetProductById(int productId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            return connection.QuerySingle<(int, string, string, int, string)>(
                "SELECT Id, Name, Description, Price, Category FROM Products WHERE Id = @Id",
                new { Id = productId });
        }

        private static (int Id, string Name, string Description, int Price, string Category, string? ImageUrl) GetProductByIdWithImage(int productId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            return connection.QuerySingle<(int, string, string, int, string, string?)>(
                "SELECT Id, Name, Description, Price, Category, ImageUrl FROM Products WHERE Id = @Id",
                new { Id = productId });
        }

        private static void CreateOrder(long telegramId, int productId, int price)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
    
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            var product = GetProductById(productId);
    
            connection.Execute(
                "INSERT INTO Orders (UserId, ProductId, ProductName, Price, Status) VALUES (@UserId, @ProductId, @ProductName, @Price, 'pending')",
                new { UserId = telegramId, ProductId = productId, ProductName = product.Name, Price = price });
        }

        // === –ó–ê–ö–ê–ó–´ –¢–û–í–ê–†–û–í ===
        private static List<(int OrderId, long UserId, int ProductId, string ProductName, int Price, DateTime CreatedAt)> GetPendingOrders()
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var sql = @"
                SELECT o.Id as OrderId, o.UserId, o.ProductId, o.ProductName, o.Price, o.CreatedAt
                FROM Orders o
                WHERE o.Status = 'pending'
                ORDER BY o.CreatedAt ASC";
            return connection.Query<(int, long, int, string, int, DateTime)>(sql).AsList();
        }

        private static (long UserId, int ProductId, int Price, DateTime CreatedAt)? GetOrderById(int orderId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var sql = @"
                SELECT o.UserId, o.ProductId, o.Price, o.CreatedAt
                FROM Orders o
                WHERE o.Id = @OrderId AND o.Status = 'pending'";
            return connection.QueryFirstOrDefault<(long, int, int, DateTime)>(sql, new { OrderId = orderId });
        }

        private static void UpdateOrderStatus(int orderId, string status)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            connection.Execute(
                "UPDATE Orders SET Status = @Status WHERE Id = @Id",
                new { Id = orderId, Status = status });
        }

        // === –ò–°–¢–û–†–ò–Ø ===
        private static IEnumerable<(string Title, int Reward, DateTime CompletedAt)> GetUserCompletedTasks(long telegramId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var sql = @"
                SELECT TaskTitle as Title, TaskReward as Reward, CreatedAt as CompletedAt
                FROM CompletedTasks
                WHERE UserId = @UserId AND Status = 'approved'
                ORDER BY CreatedAt DESC";
            return connection.Query<(string, int, DateTime)>(sql, new { UserId = telegramId });
        }

        private static IEnumerable<(string ProductName, int Price, DateTime OrderDate)> GetUserOrders(long telegramId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var sql = @"
            SELECT ProductName, Price, CreatedAt as OrderDate
            FROM Orders
            WHERE UserId = @UserId
            ORDER BY CreatedAt DESC";
            return connection.Query<(string, int, DateTime)>(sql, new { UserId = telegramId });
        }

        // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
        private static (string FullName, string? Username) GetUserFullInfo(long telegramId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var result = connection.QueryFirstOrDefault<(string, string?)>(
                "SELECT FullName, Username FROM Users WHERE TelegramId = @TelegramId",
                new { TelegramId = telegramId });
            
            if (string.IsNullOrEmpty(result.Item1))
                return ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", null);
            
            return result;
        }

        private static int GetCompletedTasksCount(long telegramId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            return connection.QueryFirstOrDefault<int>(
                "SELECT COUNT(*) FROM CompletedTasks WHERE UserId = @UserId AND Status = 'approved'",
                new { UserId = telegramId });
        }

        private static int GetUserOrdersCount(long telegramId)
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            return connection.QueryFirstOrDefault<int>(
                "SELECT COUNT(*) FROM Orders WHERE UserId = @UserId",
                new { UserId = telegramId });
        }
        // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–î–ú–ò–ù–ê ===
        private static (int Approved, int Rejected) GetAdminTasksStats()
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var approved = connection.QuerySingle<int>(
                "SELECT COUNT(*) FROM CompletedTasks WHERE Status = 'approved'");
            var rejected = connection.QuerySingle<int>(
                "SELECT COUNT(*) FROM CompletedTasks WHERE Status = 'rejected'");
            return (approved, rejected);
        }

        private static int GetAdminOrdersStats()
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            return connection.QuerySingle<int>(
                "SELECT COUNT(*) FROM Orders WHERE Status = 'in_progress'");
        }

        private static IEnumerable<(string BaristaName, string TaskTitle, string Status, DateTime ReviewedAt)> GetAdminTasksHistory()
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var sql = @"
                SELECT u.FullName as BaristaName, c.TaskTitle, c.Status, c.CreatedAt as ReviewedAt
                FROM CompletedTasks c
                JOIN Users u ON u.TelegramId = c.UserId
                WHERE c.Status IN ('approved', 'rejected')
                ORDER BY c.CreatedAt DESC
                LIMIT 20";
            return connection.Query<(string, string, string, DateTime)>(sql);
        }

        private static IEnumerable<(string BaristaName, string ProductName, string Status, DateTime OrderDate)> GetAdminOrdersHistory()
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            var sql = @"
                SELECT u.FullName as BaristaName, o.ProductName, o.Status, o.CreatedAt as OrderDate
                FROM Orders o
                JOIN Users u ON u.TelegramId = o.UserId
                WHERE o.Status = 'in_progress'
                ORDER BY o.CreatedAt DESC
                LIMIT 20";
            return connection.Query<(string, string, string, DateTime)>(sql);
        }
        private static void MigrateDatabase()
        {
            using IDbConnection connection = new SqliteConnection(DbPath);
            
            try
            {
                Console.WriteLine("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ TaskTitle –≤ CompletedTasks
                var columns = connection.Query<string>(
                    "SELECT name FROM pragma_table_info('CompletedTasks')").ToList();
                
                if (!columns.Contains("TaskTitle"))
                {
                    Console.WriteLine("üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ CompletedTasks...");
                    connection.Execute("ALTER TABLE CompletedTasks ADD COLUMN TaskTitle TEXT");
                    connection.Execute("ALTER TABLE CompletedTasks ADD COLUMN TaskReward INTEGER");
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
                    var updated = connection.Execute(@"
                        UPDATE CompletedTasks 
                        SET TaskTitle = COALESCE((SELECT Title FROM Tasks WHERE Tasks.Id = CompletedTasks.TaskId), '–£–¥–∞–ª–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'),
                            TaskReward = COALESCE((SELECT Reward FROM Tasks WHERE Tasks.Id = CompletedTasks.TaskId), 0)
                        WHERE TaskTitle IS NULL");
                    
                    Console.WriteLine($"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π CompletedTasks: {updated}");
                }
                else
                {
                    Console.WriteLine("‚úÖ CompletedTasks —É–∂–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ ProductName –≤ Orders
                var orderColumns = connection.Query<string>(
                    "SELECT name FROM pragma_table_info('Orders')").ToList();
                
                if (!orderColumns.Contains("ProductName"))
                {
                    Console.WriteLine("üì¶ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É ProductName –≤ Orders...");
                    connection.Execute("ALTER TABLE Orders ADD COLUMN ProductName TEXT");
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
                    var updated = connection.Execute(@"
                        UPDATE Orders 
                        SET ProductName = COALESCE((SELECT Name FROM Products WHERE Products.Id = Orders.ProductId), '–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä')
                        WHERE ProductName IS NULL");
                    
                    Console.WriteLine($"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π Orders: {updated}");
                }
                else
                {
                    Console.WriteLine("‚úÖ Orders —É–∂–µ –∏–º–µ–µ—Ç –∫–æ–ª–æ–Ω–∫—É ProductName");
                }
                
                Console.WriteLine("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                throw;
            }
        }
    }
}